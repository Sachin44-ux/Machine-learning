{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3277449,"sourceType":"datasetVersion","datasetId":1690571}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/sachin7yadav2511/expectation-maximization-em?scriptVersionId=208807187\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Objective: To implement the Expectation-Maximization (EM) algorithm and K-Means clustering for a dataset stored in a .CSV file, you can use Python with libraries like pandas for data manipulation, sklearn for machine learning, and matplotlib for visualization. Below is a step-by-step breakdown of how to apply both clustering algorithms and compare their results.","metadata":{}},{"cell_type":"markdown","source":"**Import Necessary Libraries**","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.mixture import GaussianMixture\nfrom sklearn.metrics import adjusted_rand_score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T11:49:44.213176Z","iopub.execute_input":"2024-11-21T11:49:44.213643Z","iopub.status.idle":"2024-11-21T11:49:48.128257Z","shell.execute_reply.started":"2024-11-21T11:49:44.213549Z","shell.execute_reply":"2024-11-21T11:49:48.126964Z"}},"outputs":[],"execution_count":1},{"cell_type":"markdown","source":"**Load the Dataset**","metadata":{}},{"cell_type":"code","source":"# Load dataset\ndata = pd.read_csv('/kaggle/input/heart-disease-health-indicators-dataset/heart_disease_health_indicators_BRFSS2015.csv')\n\n# Display first 5 rows of the dataset\nprint(\"First 5 rows of the dataset:\")\nprint(data.head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T11:51:10.84901Z","iopub.execute_input":"2024-11-21T11:51:10.849407Z","iopub.status.idle":"2024-11-21T11:51:11.823012Z","shell.execute_reply.started":"2024-11-21T11:51:10.84937Z","shell.execute_reply":"2024-11-21T11:51:11.821316Z"}},"outputs":[{"name":"stdout","text":"First 5 rows of the dataset:\n   HeartDiseaseorAttack  HighBP  HighChol  CholCheck   BMI  Smoker  Stroke  \\\n0                   0.0     1.0       1.0        1.0  40.0     1.0     0.0   \n1                   0.0     0.0       0.0        0.0  25.0     1.0     0.0   \n2                   0.0     1.0       1.0        1.0  28.0     0.0     0.0   \n3                   0.0     1.0       0.0        1.0  27.0     0.0     0.0   \n4                   0.0     1.0       1.0        1.0  24.0     0.0     0.0   \n\n   Diabetes  PhysActivity  Fruits  ...  AnyHealthcare  NoDocbcCost  GenHlth  \\\n0       0.0           0.0     0.0  ...            1.0          0.0      5.0   \n1       0.0           1.0     0.0  ...            0.0          1.0      3.0   \n2       0.0           0.0     1.0  ...            1.0          1.0      5.0   \n3       0.0           1.0     1.0  ...            1.0          0.0      2.0   \n4       0.0           1.0     1.0  ...            1.0          0.0      2.0   \n\n   MentHlth  PhysHlth  DiffWalk  Sex   Age  Education  Income  \n0      18.0      15.0       1.0  0.0   9.0        4.0     3.0  \n1       0.0       0.0       0.0  0.0   7.0        6.0     1.0  \n2      30.0      30.0       1.0  0.0   9.0        4.0     8.0  \n3       0.0       0.0       0.0  0.0  11.0        3.0     6.0  \n4       3.0       0.0       0.0  0.0  11.0        5.0     4.0  \n\n[5 rows x 22 columns]\n","output_type":"stream"}],"execution_count":3},{"cell_type":"markdown","source":"**Data Preprocessing**","metadata":{}},{"cell_type":"code","source":"# Data preprocessing\ndata = data.fillna(data.mean())  # Fill missing values with the mean of the column\nscaler = StandardScaler()  # Initialize the scaler\nscaled_data = scaler.fit_transform(data)  # Scale the data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T11:51:54.328502Z","iopub.execute_input":"2024-11-21T11:51:54.328934Z","iopub.status.idle":"2024-11-21T11:51:54.528797Z","shell.execute_reply.started":"2024-11-21T11:51:54.328901Z","shell.execute_reply":"2024-11-21T11:51:54.527764Z"}},"outputs":[],"execution_count":4},{"cell_type":"markdown","source":"**Apply K-Means Clustering**","metadata":{}},{"cell_type":"code","source":"# Apply K-Means clustering\nk = 3  # Number of clusters\nkmeans = KMeans(n_clusters=k, random_state=42)  # Initialize K-Means with the specified k\nkmeans.fit(scaled_data)  # Fit the model to the data\nkmeans_labels = kmeans.labels_  # Get the cluster labels\n\n# Plot K-Means clusters\nplt.scatter(scaled_data[:, 0], scaled_data[:, 1], c=kmeans_labels, cmap='viridis')\nplt.title('K-Means Clustering')\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.show()  # Show the plot","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T11:52:39.828206Z","iopub.execute_input":"2024-11-21T11:52:39.828589Z","iopub.status.idle":"2024-11-21T11:52:47.377492Z","shell.execute_reply.started":"2024-11-21T11:52:39.828556Z","shell.execute_reply":"2024-11-21T11:52:47.376414Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":5},{"cell_type":"markdown","source":"**Apply Expectation-Maximization (EM) Algorithm**","metadata":{}},{"cell_type":"code","source":"# Apply EM (Gaussian Mixture) clustering\nem = GaussianMixture(n_components=k, random_state=42)  # Initialize GMM with k clusters\nem.fit(scaled_data)  # Fit the model to the data\nem_labels = em.predict(scaled_data)  # Get the predicted cluster labels\n\n# Plot EM clusters\nplt.scatter(scaled_data[:, 0], scaled_data[:, 1], c=em_labels, cmap='viridis')\nplt.title('EM Algorithm (Gaussian Mixture) Clustering')\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.show()  # Show the plot","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T11:53:38.044003Z","iopub.execute_input":"2024-11-21T11:53:38.044403Z","iopub.status.idle":"2024-11-21T11:53:59.829237Z","shell.execute_reply.started":"2024-11-21T11:53:38.044373Z","shell.execute_reply":"2024-11-21T11:53:59.828095Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":6},{"cell_type":"markdown","source":"**Evaluate the Quality of Clustering**","metadata":{}},{"cell_type":"code","source":"# Evaluate the quality of clustering\nari_score = adjusted_rand_score(kmeans_labels, em_labels)  # Compare the clusterings\nprint(f\"Adjusted Rand Index (ARI) between K-Means and EM: {ari_score:.4f}\")  # Display ARI score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T11:54:59.108853Z","iopub.execute_input":"2024-11-21T11:54:59.109948Z","iopub.status.idle":"2024-11-21T11:54:59.175123Z","shell.execute_reply.started":"2024-11-21T11:54:59.109908Z","shell.execute_reply":"2024-11-21T11:54:59.173638Z"}},"outputs":[{"name":"stdout","text":"Adjusted Rand Index (ARI) between K-Means and EM: 0.2992\n","output_type":"stream"}],"execution_count":7}]}