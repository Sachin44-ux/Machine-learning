{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3277449,"sourceType":"datasetVersion","datasetId":1690571}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/sachin7yadav2511/diagnosis?scriptVersionId=208803149\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Objective :To build and evaluate a machine learning model for diagnosing heart disease using medical data, with metrics like accuracy, precision, and recall.\n\n\n\n\n\n\n","metadata":{}},{"cell_type":"markdown","source":"**Importing Required Libraries**","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, classification_report\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T11:24:38.751022Z","iopub.execute_input":"2024-11-21T11:24:38.751422Z","iopub.status.idle":"2024-11-21T11:24:41.649986Z","shell.execute_reply.started":"2024-11-21T11:24:38.751385Z","shell.execute_reply":"2024-11-21T11:24:41.648765Z"}},"outputs":[],"execution_count":1},{"cell_type":"markdown","source":"**Load and Inspect the Dataset**","metadata":{}},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/input/heart-disease-health-indicators-dataset/heart_disease_health_indicators_BRFSS2015.csv')\n\n# Display dataset structure\nprint(\"First 5 rows of the dataset:\")\nprint(data.head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T11:26:23.731754Z","iopub.execute_input":"2024-11-21T11:26:23.732364Z","iopub.status.idle":"2024-11-21T11:26:24.574597Z","shell.execute_reply.started":"2024-11-21T11:26:23.732326Z","shell.execute_reply":"2024-11-21T11:26:24.573469Z"}},"outputs":[{"name":"stdout","text":"First 5 rows of the dataset:\n   HeartDiseaseorAttack  HighBP  HighChol  CholCheck   BMI  Smoker  Stroke  \\\n0                   0.0     1.0       1.0        1.0  40.0     1.0     0.0   \n1                   0.0     0.0       0.0        0.0  25.0     1.0     0.0   \n2                   0.0     1.0       1.0        1.0  28.0     0.0     0.0   \n3                   0.0     1.0       0.0        1.0  27.0     0.0     0.0   \n4                   0.0     1.0       1.0        1.0  24.0     0.0     0.0   \n\n   Diabetes  PhysActivity  Fruits  ...  AnyHealthcare  NoDocbcCost  GenHlth  \\\n0       0.0           0.0     0.0  ...            1.0          0.0      5.0   \n1       0.0           1.0     0.0  ...            0.0          1.0      3.0   \n2       0.0           0.0     1.0  ...            1.0          1.0      5.0   \n3       0.0           1.0     1.0  ...            1.0          0.0      2.0   \n4       0.0           1.0     1.0  ...            1.0          0.0      2.0   \n\n   MentHlth  PhysHlth  DiffWalk  Sex   Age  Education  Income  \n0      18.0      15.0       1.0  0.0   9.0        4.0     3.0  \n1       0.0       0.0       0.0  0.0   7.0        6.0     1.0  \n2      30.0      30.0       1.0  0.0   9.0        4.0     8.0  \n3       0.0       0.0       0.0  0.0  11.0        3.0     6.0  \n4       3.0       0.0       0.0  0.0  11.0        5.0     4.0  \n\n[5 rows x 22 columns]\n","output_type":"stream"}],"execution_count":2},{"cell_type":"markdown","source":"**Feature Selection and Target Variable Identification**","metadata":{}},{"cell_type":"code","source":"# Set the target column directly\ntarget_column = \"HeartDiseaseorAttack\"  # Specify the target column name here\nX = data.drop(columns=[target_column])\ny = data[target_column]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T11:32:23.826054Z","iopub.execute_input":"2024-11-21T11:32:23.826462Z","iopub.status.idle":"2024-11-21T11:32:23.852604Z","shell.execute_reply.started":"2024-11-21T11:32:23.82643Z","shell.execute_reply":"2024-11-21T11:32:23.851416Z"}},"outputs":[],"execution_count":5},{"cell_type":"markdown","source":"**Standardize the Features**","metadata":{}},{"cell_type":"code","source":"# Scale the features for uniformity\nscaler = StandardScaler()\nX = scaler.fit_transform(X)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T11:34:11.456266Z","iopub.execute_input":"2024-11-21T11:34:11.456707Z","iopub.status.idle":"2024-11-21T11:34:11.546716Z","shell.execute_reply.started":"2024-11-21T11:34:11.456657Z","shell.execute_reply":"2024-11-21T11:34:11.545593Z"}},"outputs":[],"execution_count":6},{"cell_type":"markdown","source":"**Split the Data into Training and Testing Sets**","metadata":{}},{"cell_type":"code","source":"# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T11:35:00.62228Z","iopub.execute_input":"2024-11-21T11:35:00.623384Z","iopub.status.idle":"2024-11-21T11:35:00.722866Z","shell.execute_reply.started":"2024-11-21T11:35:00.623344Z","shell.execute_reply":"2024-11-21T11:35:00.721936Z"}},"outputs":[],"execution_count":7},{"cell_type":"markdown","source":"**Initialize and Train the Model**","metadata":{}},{"cell_type":"code","source":"# Initialize and train the model\nmodel = RandomForestClassifier(random_state=42, n_estimators=100)\nmodel.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T11:35:46.497402Z","iopub.execute_input":"2024-11-21T11:35:46.498438Z","iopub.status.idle":"2024-11-21T11:36:05.034995Z","shell.execute_reply.started":"2024-11-21T11:35:46.498397Z","shell.execute_reply":"2024-11-21T11:36:05.033957Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"RandomForestClassifier(random_state=42)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":8},{"cell_type":"markdown","source":"**Make Predictions**","metadata":{}},{"cell_type":"code","source":"# Make predictions\ny_pred = model.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T11:36:30.946517Z","iopub.execute_input":"2024-11-21T11:36:30.946898Z","iopub.status.idle":"2024-11-21T11:36:33.113961Z","shell.execute_reply.started":"2024-11-21T11:36:30.946866Z","shell.execute_reply":"2024-11-21T11:36:33.11287Z"}},"outputs":[],"execution_count":9},{"cell_type":"markdown","source":"**Evaluate the Model**","metadata":{}},{"cell_type":"code","source":"# Evaluate the model\naccuracy = accuracy_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred, average='weighted', zero_division=0)\nrecall = recall_score(y_test, y_pred, average='weighted', zero_division=0)\n\n# Display results\nprint(\"\\nModel Evaluation:\")\nprint(f\"Accuracy: {accuracy:.2f}\")\nprint(f\"Precision: {precision:.2f}\")\nprint(f\"Recall: {recall:.2f}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred, zero_division=0))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T11:37:17.33134Z","iopub.execute_input":"2024-11-21T11:37:17.331761Z","iopub.status.idle":"2024-11-21T11:37:17.588495Z","shell.execute_reply.started":"2024-11-21T11:37:17.331727Z","shell.execute_reply":"2024-11-21T11:37:17.587264Z"}},"outputs":[{"name":"stdout","text":"\nModel Evaluation:\nAccuracy: 0.90\nPrecision: 0.87\nRecall: 0.90\n\nClassification Report:\n              precision    recall  f1-score   support\n\n         0.0       0.92      0.98      0.95     69007\n         1.0       0.44      0.12      0.18      7097\n\n    accuracy                           0.90     76104\n   macro avg       0.68      0.55      0.57     76104\nweighted avg       0.87      0.90      0.88     76104\n\n","output_type":"stream"}],"execution_count":10}]}